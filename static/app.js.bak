// Calendar initialization
let calendar;
let tasks = [];  // Store tasks globally

// Initialize event listeners when the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    loadProjects();
    loadTasks();
    initializeCalendar();
    setupEventListeners();
});

function setupEventListeners() {
    // Status Report button
    const statusReportBtn = document.getElementById('generateStatusReportBtn');
    if (statusReportBtn) {
        statusReportBtn.addEventListener('click', generateStatusReport);
    }
    
    // Other event listeners...
}

// Initialize calendar
function initializeCalendar() {
    const calendarEl = document.getElementById('calendar');
    calendar = new FullCalendar.Calendar(calendarEl, {
        timeZone: 'America/Denver',
        initialView: 'timeGridWeek',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        editable: true,
        selectable: true,
        eventTimeFormat: {
            hour: 'numeric',
            minute: '2-digit',
            meridiem: 'short'
        },
        select: function(info) {
            // Debug log the raw times from FullCalendar
            console.log('Raw start:', info.start);
            console.log('Raw start hours:', info.start.getHours());
            console.log('Raw start timezone offset:', info.start.getTimezoneOffset());
            
            // Adjust for timezone offset (add 7 hours to correct the time)
            const start = moment(info.start).add(7, 'hours');
            const end = moment(info.end).add(7, 'hours');
            
            // Format for datetime-local input
            const startStr = start.format('YYYY-MM-DDTHH:mm');
            const endStr = end.format('YYYY-MM-DDTHH:mm');
            
            console.log('Adjusted start time:', startStr);
            console.log('Adjusted end time:', endStr);
            
            document.getElementById('eventStart').value = startStr;
            document.getElementById('eventEnd').value = endStr;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
            modal.show();
        },
        eventClick: function(info) {
            showEditEventModal(info.event);
        },
        eventDrop: function(info) {
            updateEventTime(info.event);
        },
        eventResize: function(info) {
            updateEventTime(info.event);
        },
        events: function(fetchInfo, successCallback, failureCallback) {
            fetch('/api/calendar')
                .then(response => response.json())
                .then(events => {
                    // Convert UTC ISO strings to local dates
                    const formattedEvents = events.map(event => ({
                        ...event,
                        start: moment.utc(event.start).local().format(),
                        end: moment.utc(event.end).local().format()
                    }));
                    successCallback(formattedEvents);
                })
                .catch(error => {
                    console.error('Error fetching events:', error);
                    failureCallback(error);
                });
        }
    });
    calendar.render();
}

function formatDateTimeLocal(date) {
    // Ensure the date is treated as local time
    return moment(date).format('YYYY-MM-DDTHH:mm');
}

function showAddEventModal(start = null, end = null) {
    document.getElementById('eventModalTitle').textContent = 'Add Event';
    document.getElementById('eventId').value = '';
    document.getElementById('eventTitle').value = '';
    document.getElementById('eventDescription').value = '';
    document.getElementById('deleteEventBtn').style.display = 'none';
    
    if (start) {
        // Format the local time for the input
        document.getElementById('eventStart').value = formatDateTimeLocal(start);
    }
    if (end) {
        // Format the local time for the input
        document.getElementById('eventEnd').value = formatDateTimeLocal(end);
    }
    
    const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
    modal.show();
}

function showEditEventModal(event) {
    document.getElementById('eventModalTitle').textContent = 'Edit Event';
    document.getElementById('eventId').value = event.id;
    document.getElementById('eventTitle').value = event.title;
    
    // Convert UTC to local time for display
    const localStart = moment.utc(event.start).local();
    const localEnd = moment.utc(event.end).local();
    
    document.getElementById('eventStart').value = formatDateTimeLocal(localStart);
    document.getElementById('eventEnd').value = formatDateTimeLocal(localEnd);
    document.getElementById('eventDescription').value = event.extendedProps.description || '';
    document.getElementById('deleteEventBtn').style.display = 'block';
    
    const modal = new bootstrap.Modal(document.getElementById('addEventModal'));
    modal.show();
}

async function saveEvent() {
    const eventId = document.getElementById('eventId').value;
    const startInput = document.getElementById('eventStart').value;
    const endInput = document.getElementById('eventEnd').value;
    
    console.log('Local Start Time:', startInput);
    console.log('Local End Time:', endInput);

    // Convert local time to MST using moment.js
    const startMST = moment.tz(startInput, 'America/Denver').format();
    const endMST = moment.tz(endInput, 'America/Denver').format();

    console.log('MST Start Time:', startMST);
    console.log('MST End Time:', endMST);

    const event = {
        title: document.getElementById('eventTitle').value,
        start_time: startMST,
        end_time: endMST,
        description: document.getElementById('eventDescription').value
    };

    try {
        const url = eventId ? `/api/calendar/${eventId}` : '/api/calendar';
        const method = eventId ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(event)
        });

        if (!response.ok) {
            const data = await response.json();
            throw new Error(data.error || 'Failed to save event');
        }

        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('addEventModal'));
        if (modal) {
            modal.hide();
        }

        // Refresh the calendar events
        calendar.refetchEvents();
        
        // Show success message
        showToast('Success', 'Event saved successfully', 'success');
    } catch (error) {
        console.error('Error saving event:', error);
        showToast('Error', error.message || 'Failed to save event', 'error');
    }
}

async function updateEventTime(event) {
    try {
        const response = await fetch(`/api/calendar/${event.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                title: event.title,
                start_time: moment(event.start).utc().format(),
                end_time: moment(event.end).utc().format(),
                description: event.extendedProps.description || ''
            })
        });

        if (!response.ok) {
            throw new Error('Failed to update event');
        }

        showToast('Success', 'Event updated successfully', 'success');
    } catch (error) {
        console.error('Error updating event:', error);
        showToast('Error', error.message || 'Failed to update event', 'error');
        event.revert();
    }
}

function showAddTaskModal() {
    // Clear previous values
    document.getElementById('taskTitle').value = '';
    document.getElementById('taskDescription').value = '';
    document.getElementById('taskDuration').value = '';
    document.getElementById('taskPriority').value = '3';
    
    // Load available projects for selection
    loadProjectsForTaskModal();
    
    // Load available tasks for dependencies
    loadTasksForDependencies();
    
    // Show the modal using Bootstrap's Modal constructor
    const modalElement = document.getElementById('addTaskModal');
    const modal = new bootstrap.Modal(modalElement);
    modal.show();
}

async function showEditTaskModal(task) {
    try {
        console.log('Showing edit modal for task:', task);
        
        // Load projects and dependencies
        Promise.all([
            loadProjectsForTaskModal(),
            loadTasksForDependencies(task.id)
        ]).then(() => {
            const modal = document.getElementById('editTaskModal');
            
            // Set task ID
            const taskIdInput = document.getElementById('editTaskId');
            if (taskIdInput) {
                taskIdInput.value = task.id;
            } else {
                console.error('Task ID input not found');
                throw new Error('Task ID input not found');
            }
            
            // Set basic task information
            const fields = {
                'editTaskTitle': task.title,
                'editTaskDescription': task.description || '',
                'editTaskTicketNumber': task.ticket_number || '',
                'editTaskPriority': task.priority,
                'editTaskStatus': task.status,
                'editTaskDuration': task.estimated_duration || 60,
                'editTaskProject': task.project_id
            };
            
            for (const [id, value] of Object.entries(fields)) {
                const element = document.getElementById(id);
                if (element) {
                    element.value = value;
                } else {
                    console.warn(`Element not found: ${id}`);
                }
            }
            
            // Set dependencies
            const dependenciesSelect = document.getElementById('editTaskDependencies');
            if (dependenciesSelect) {
                Array.from(dependenciesSelect.options).forEach(option => {
                    option.selected = task.dependencies.includes(parseInt(option.value));
                });
            }
            
            // Update time tracking information
            const timeFields = {
                'editTaskStartedAt': task.started_at ? new Date(task.started_at).toLocaleString() : '-',
                'editTaskCompletedAt': task.completed_at ? new Date(task.completed_at).toLocaleString() : '-',
                'editTaskActualDuration': task.actual_duration ? `${task.actual_duration} minutes` : '-'
            };
            
            for (const [id, value] of Object.entries(timeFields)) {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                } else {
                    console.warn(`Element not found: ${id}`);
                }
            }
            
            // Show the modal
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();
        }).catch(error => {
            console.error('Error loading modal data:', error);
            showToast('Error', 'Failed to load task details', 'error');
        });
    } catch (error) {
        console.error('Error showing edit task modal:', error);
        showToast('Error', 'Failed to load task details', 'error');
    }
}

async function loadStatusHistory(taskId) {
    fetch(`/api/tasks/${taskId}/status-history`)
        .then(response => response.json())
        .then(data => {
            const historyContainer = document.getElementById('statusHistory');
            historyContainer.innerHTML = '';
            
            if (data.status_updates && data.status_updates.length > 0) {
                const timeline = document.createElement('div');
                timeline.className = 'status-timeline';
                
                data.status_updates.forEach(update => {
                    const updateItem = document.createElement('div');
                    updateItem.className = 'status-update-item';
                    
                    const date = new Date(update.created_at);
                    updateItem.innerHTML = `
                        <div class="status-badge ${getStatusColor(update.status)}">
                            ${update.status}
                        </div>
                        <div class="status-details">
                            <div class="status-time">
                                ${date.toLocaleString()}
                            </div>
                            ${update.notes ? `<div class="status-notes">${update.notes}</div>` : ''}
                        </div>
                    `;
                    
                    timeline.appendChild(updateItem);
                });
                
                historyContainer.appendChild(timeline);
            } else {
                historyContainer.innerHTML = '<p class="text-muted">No status updates yet</p>';
            }
        })
        .catch(error => {
            console.error('Error loading status history:', error);
            showToast('Error', 'Failed to load status history', 'error');
        });
}

async function updateTaskStatus() {
    const modal = document.getElementById('editTaskModal');
    const form = modal.querySelector('form');
    const taskId = document.getElementById('editTaskId').value;
    const status = form.querySelector('#editTaskStatus').value;
    const notes = form.querySelector('#statusNotes').value;
    
    fetch(`/api/tasks/${taskId}/status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            status: status,
            notes: notes
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            throw new Error(data.error);
        }
        showToast('Success', 'Status updated successfully', 'success');
        loadTasks();  // Refresh task list
        loadStatusHistory(taskId);  // Refresh status history
        form.querySelector('#statusNotes').value = '';  // Clear notes field
    })
    .catch(error => {
        console.error('Error updating status:', error);
        showToast('Error', error.message || 'Failed to update status', 'error');
    });
}

async function loadTasksForDependencies(excludeTaskId = null) {
    try {
        const response = await fetch('/api/tasks');
        if (!response.ok) {
            throw new Error('Failed to load tasks');
        }
        const data = await response.json();
        if (!data.tasks || !Array.isArray(data.tasks)) {
            throw new Error('Invalid tasks data received');
        }
        
        const taskSelect = document.getElementById('taskDependencies');
        if (!taskSelect) {
            console.error('Task dependencies select element not found');
            return;
        }
        
        // Clear existing options
        taskSelect.innerHTML = '';
        
        // Add tasks as options
        data.tasks.forEach(task => {
            if (excludeTaskId === null || task.id !== excludeTaskId) {  // Don't show current task as dependency option
                const option = document.createElement('option');
                option.value = task.id;
                option.textContent = task.title;
                taskSelect.appendChild(option);
            }
        });
    } catch (error) {
        console.error('Error loading tasks for dependencies:', error);
        showToast('error', 'Failed to load tasks for dependencies');
    }
}

async function loadProjectsForTaskModal() {
    try {
        console.log('Loading projects for task modal...');
        const response = await fetch('/api/projects');
        console.log('Projects API response status:', response.status);
        const projects = await response.json();
        console.log('Projects loaded:', projects);
        
        const select = document.getElementById('taskProject');
        if (!select) {
            console.error('Could not find taskProject select element');
            return;
        }
        
        select.innerHTML = `
            <option value="" disabled selected>Select a project</option>
            ${projects.map(project => 
                `<option value="${project.id}">${project.name}</option>`
            ).join('')}
        `;
        console.log('Projects loaded into select:', select.innerHTML);
    } catch (error) {
        console.error('Error loading projects for task modal:', error);
        showToast('Error', 'Failed to load projects', 'error');
    }
}

async function saveTask() {
    const modal = document.getElementById('editTaskModal');
    const taskId = document.getElementById('editTaskId').value;
    
    if (!taskId) {
        showToast('Error', 'Task ID is missing', 'error');
        return;
    }
    
    try {
        const data = {
            title: document.getElementById('editTaskTitle').value,
            description: document.getElementById('editTaskDescription').value,
            ticket_number: document.getElementById('editTaskTicketNumber').value,
            priority: parseInt(document.getElementById('editTaskPriority').value),
            status: document.getElementById('editTaskStatus').value,
            estimated_duration: parseInt(document.getElementById('editTaskDuration').value) || null,
            project_id: parseInt(document.getElementById('editTaskProject').value)
        };

        // Get dependencies
        const dependenciesSelect = document.getElementById('editTaskDependencies');
        if (dependenciesSelect) {
            data.dependencies = Array.from(dependenciesSelect.selectedOptions).map(option => parseInt(option.value));
        }

        console.log('Saving task:', taskId, data);

        const response = await fetch(`/api/tasks/${taskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || 'Failed to save task');
        }

        showToast('Success', 'Task updated successfully', 'success');
        await loadTasks();  // Refresh task list
        
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) {
            modalInstance.hide();
        }
    } catch (error) {
        console.error('Error saving task:', error);
        showToast('Error', error.message || 'Failed to save task changes', 'error');
    }
}

async function deleteTask(taskId) {
    // If taskId is not provided, try to get it from the edit modal
    if (!taskId) {
        taskId = document.getElementById('editTaskId')?.value;
    }
    
    if (!taskId) {
        console.error('No task ID found for deletion');
        showToast('Error', 'Could not find task to delete', 'error');
        return;
    }

    if (confirm('Are you sure you want to delete this task?')) {
        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Failed to delete task');
            }

            showToast('Success', 'Task deleted successfully', 'success');
            await loadTasks();  // Refresh task list
            
            // Close any open modals
            const editModal = bootstrap.Modal.getInstance(document.getElementById('editTaskModal'));
            if (editModal) {
                editModal.hide();
            }
        } catch (error) {
        console.error('Error deleting task:', error);
        showToast('Error', 'Failed to delete task', 'error');
    }
}

async function loadProjects() {
    try {
        const response = await fetch('/api/projects');
        const projects = await response.json();
        displayProjects(projects);
    } catch (error) {
        console.error('Error loading projects:', error);
    }
}

async function loadTasks() {
    try {
        const response = await fetch('/api/tasks');
        if (!response.ok) {
            throw new Error('Failed to load tasks');
        }
        const data = await response.json();
        console.log('Tasks response:', data);
        
        if (!data.tasks || !Array.isArray(data.tasks)) {
            console.error('Invalid tasks data:', data);
            throw new Error('Server returned invalid task data');
        }
        
        tasks = data.tasks;  // Update global tasks variable
        displayTasks(tasks);
        return tasks;
    } catch (error) {
        console.error('Error loading tasks:', error);
        showToast('error', 'Failed to load tasks');
        return [];
    }
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, loading tasks...');
    loadTasks();
});

function displayTasks(tasks) {
    const tasksList = document.getElementById('tasks-list');
    if (!tasksList) {
        console.error('Tasks list element not found');
        return;
    }
    
    console.log('Displaying tasks:', tasks);
    tasksList.innerHTML = '';
    
    if (!Array.isArray(tasks) || tasks.length === 0) {
        tasksList.innerHTML = `
            <div class="alert alert-info">
                No tasks found. Click the "Add Task" button to create your first task.
            </div>
        `;
        return;
    }
    
    tasks.forEach(task => {
        const taskItem = document.createElement('div');
        taskItem.className = 'task-item card mb-3';
        taskItem.innerHTML = `
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        ${task.title}
                        ${task.ticket_number ? `<small class="text-muted">(${task.ticket_number})</small>` : ''}
                    </h5>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-outline-primary edit-task-btn">
                            <i class="fas fa-pencil"></i> Edit
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary schedule-task-btn">
                            <i class="fas fa-calendar"></i> Schedule
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger delete-task-btn" onclick="deleteTask(${task.id})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
                <p class="card-text mt-2">${task.description || ''}</p>
                <div class="task-meta d-flex justify-content-between align-items-center">
                    <div>
                        <span class="badge ${getStatusBackground(task.status)}">${task.status}</span>
                        <span class="badge ${getPriorityClass(task.priority)}">${task.priority_label}</span>
                        ${task.project_name ? `<span class="badge bg-info">${task.project_name}</span>` : ''}
                    </div>
                    <div>
                        ${task.estimated_duration ? `<small class="text-muted">Est: ${task.estimated_duration}m</small>` : ''}
                        ${task.actual_duration ? `<small class="text-muted ms-2">Actual: ${task.actual_duration}m</small>` : ''}
                    </div>
                </div>
                <div class="progress mt-2" style="height: 5px;">
                    <div class="progress-bar" role="progressbar" style="width: ${task.progress}%"></div>
                </div>
            </div>
        `;
        
        // Add event listener to edit button
        const editButton = taskItem.querySelector('.edit-task-btn');
        editButton.addEventListener('click', () => showEditTaskModal(task));
        
        tasksList.appendChild(taskItem);
    });
}

async function addTask() {
    const modal = document.getElementById('addTaskModal');
    const form = modal.querySelector('form');
    
    try {
        console.log('Starting task creation...');
        
        // Get form values
        const title = document.getElementById('taskTitle').value;
        const description = document.getElementById('taskDescription').value;
        const ticketNumber = document.getElementById('taskTicketNumber').value;
        const priority = document.getElementById('taskPriority').value;
        const status = document.getElementById('taskStatus').value;
        const duration = document.getElementById('taskDuration').value;
        const projectId = document.getElementById('taskProject').value;
        
        console.log('Form values:', {
            title,
            description,
            ticketNumber,
            priority,
            status,
            duration,
            projectId
        });
        
        if (!title) {
            throw new Error('Title is required');
        }
        
        if (!projectId) {
            throw new Error('Project is required');
        }

        const data = {
            title,
            description,
            ticket_number: ticketNumber,
            priority: parseInt(priority),
            status,
            estimated_duration: parseInt(duration) || null,
            project_id: parseInt(projectId)
        };
        
        // Get dependencies
        const dependenciesSelect = document.getElementById('taskDependencies');
        if (dependenciesSelect) {
            data.dependencies = Array.from(dependenciesSelect.selectedOptions).map(option => parseInt(option.value));
        }

        console.log('Sending task data to server:', data);

        const response = await fetch('/api/tasks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        console.log('Server response status:', response.status);
        const result = await response.json();
        console.log('Server response:', result);
        
        if (!response.ok) {
            throw new Error(result.error || 'Failed to create task');
        }

        showToast('Success', 'Task created successfully', 'success');
        await loadTasks();  // Refresh task list
        
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) {
            modalInstance.hide();
        }
        
        // Reset form
        if (form) {
            form.reset();
        }
    } catch (error) {
        console.error('Error creating task:', error);
        showToast('Error', error.message || 'Failed to create task', 'error');
    }
}

async function generateSchedule() {
    try {
        showLoadingToast('Generating schedule suggestions...');
        
        const response = await fetch('/api/schedule/suggest', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({})  // Send empty object since we want to schedule all tasks
        });
        
        if (!response.ok) {
            throw new Error('Failed to generate schedule');
        }
        
        const data = await response.json();
        if (data.error) {
            throw new Error(data.error);
        }
        
        // Create modal if it doesn't exist
        let modalElement = document.getElementById('scheduleSuggestionsModal');
        if (!modalElement) {
            const modalDiv = document.createElement('div');
            modalDiv.innerHTML = `
                <div class="modal fade" id="scheduleSuggestionsModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Schedule Suggestions</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div id="scheduleSuggestions">
                                    <!-- Suggestions will be loaded here -->
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modalDiv.firstElementChild);
            modalElement = document.getElementById('scheduleSuggestionsModal');
        }
        
        // Display suggestions in the modal
        const suggestionsDiv = document.getElementById('scheduleSuggestions');
        if (data.suggestions && data.suggestions.length > 0) {
            const suggestionsHtml = data.suggestions.map(suggestion => {
                const suggestedTime = new Date(suggestion.suggested_time).toLocaleString();
                return `
                    <div class="suggestion-item mb-3 card">
                        <div class="card-body">
                            <h5 class="card-title">${suggestion.task}</h5>
                            <p class="card-text"><strong>Suggested Time:</strong> ${suggestedTime}</p>
                            <p class="card-text"><strong>Duration:</strong> ${suggestion.duration} minutes</p>
                            <p class="card-text"><strong>Reason:</strong> ${suggestion.reason}</p>
                            <button class="btn btn-success" onclick="acceptScheduleSuggestion(${suggestion.task_id}, '${suggestion.suggested_time}', ${suggestion.duration})">
                                Accept
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            suggestionsDiv.innerHTML = `
                <div class="alert alert-info mb-3">
                    Here are your AI-powered schedule suggestions:
                </div>
                ${suggestionsHtml}
            `;
        } else {
            suggestionsDiv.innerHTML = `
                <div class="alert alert-warning">
                    No schedule suggestions available at this time. This might be because:
                    <ul>
                        <li>All tasks are already scheduled or completed</li>
                        <li>No suitable time slots were found</li>
                        <li>Tasks have incomplete dependencies</li>
                        <li>Tasks don't have estimated durations set</li>
                    </ul>
                </div>
            `;
        }
        
        // Show the modal
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        hideLoadingToast();
    } catch (error) {
        console.error('Error generating schedule:', error);
        hideLoadingToast();
        showToast('Error', error.message || 'Failed to generate schedule', 'error');
    }
}

async function acceptScheduleSuggestion(taskId, suggestedTime, duration) {
    try {
        const response = await fetch('/api/schedule/approve', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                task_id: taskId,
                suggested_time: suggestedTime,
                duration: duration
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to schedule task');
        }
        
        const result = await response.json();
        showToast('Success', 'Task scheduled successfully', 'success');
        
        // Close the suggestions modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('scheduleSuggestionsModal'));
        if (modal) {
            modal.hide();
        }
        
        // Refresh the tasks list and calendar
        await loadTasks();
        if (calendar) {
            calendar.refetchEvents();
        }
    } catch (error) {
        console.error('Error accepting schedule suggestion:', error);
        showToast('Error', error.message || 'Failed to schedule task', 'error');
    }
}

// Add schedule button to task items
function addScheduleButton(taskItem, task) {
    const scheduleButton = document.createElement('button');
    scheduleButton.className = 'btn btn-sm btn-outline-primary ms-2';
    scheduleButton.innerHTML = '<i class="fas fa-calendar-alt"></i>';
    scheduleButton.title = 'Get AI scheduling suggestions';
    
    scheduleButton.addEventListener('click', async () => {
        event.stopPropagation(); // Stop event from bubbling up
        try {
            const response = await fetch('/api/schedule/suggest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    task_id: task.id
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to get scheduling suggestions');
            }
            
            const data = await response.json();
            if (data.suggestions && data.suggestions.length > 0) {
                showSchedulingSuggestions(data.suggestions, task);
            } else {
                showToast('Info', 'No scheduling suggestions available at this time.', 'info');
            }
        } catch (error) {
            console.error('Error getting scheduling suggestions:', error);
            showToast('Error', 'Error getting scheduling suggestions. Please try again.', 'error');
        }
    });
    
    taskItem.querySelector('.task-actions').appendChild(scheduleButton);
}

function showSchedulingSuggestions(suggestions, task) {
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.innerHTML = `
        <div class="modal fade" id="schedulingModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Scheduling Suggestions for "${task.title}"</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="list-group">
                            ${suggestions.map(suggestion => `
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-1">Suggested Time: ${new Date(suggestion.suggested_time).toLocaleString()}</h6>
                                            <p class="mb-1 text-muted">Duration: ${suggestion.duration} minutes</p>
                                            <p class="mb-1 small text-muted">${suggestion.reason}</p>
                                        </div>
                                        <button class="btn btn-sm btn-success schedule-time-btn" 
                                                data-time="${suggestion.suggested_time}"
                                                data-duration="${suggestion.duration}">
                                            Schedule
                                        </button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove any existing modal
    const existingModal = document.getElementById('schedulingModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Add modal to document
    document.body.appendChild(modalContent.firstElementChild);
    
    // Initialize modal
    const modal = new bootstrap.Modal(document.getElementById('schedulingModal'));
    modal.show();
    
    // Add event listeners to schedule buttons
    document.querySelectorAll('.schedule-time-btn').forEach(button => {
        button.addEventListener('click', async () => {
            const scheduledTime = button.dataset.time;
            const duration = parseInt(button.dataset.duration, 10);
            
            try {
                const response = await fetch('/api/schedule/approve', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        task_id: task.id,
                        suggested_time: scheduledTime,
                        duration: duration
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to schedule task');
                }
                
                const data = await response.json();
                showToast('Success', `Task scheduled for ${new Date(scheduledTime).toLocaleString()}`, 'success');
                modal.hide();
                loadTasks(); // Refresh task list
                if (calendar) calendar.refetchEvents(); // Refresh calendar if it exists
            } catch (error) {
                console.error('Error scheduling task:', error);
                showToast('Error', 'Error scheduling task. Please try again.', 'error');
            }
        });
    });
}

async function loadProjects() {
    try {
        const response = await fetch('/api/projects');
        const projects = await response.json();
        displayProjects(projects);
    } catch (error) {
        console.error('Error loading projects:', error);
    }
}

async function showAddProjectModal() {
    // Clear the form fields
    document.getElementById('projectName').value = '';
    document.getElementById('projectDescription').value = '';
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('addProjectModal'));
    modal.show();
}

async function saveProject() {
    const projectId = document.getElementById('projectId').value;
    const project = {
        name: document.getElementById('projectName').value,
        description: document.getElementById('projectDescription').value,
        status: document.getElementById('projectStatus').value,
        priority: parseInt(document.getElementById('projectPriority').value),
        color: document.getElementById('projectColor')?.value
    };

    try {
        const url = projectId ? `/api/projects/${projectId}` : '/api/projects';
        const method = projectId ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(project)
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to save project');
        }

        loadProjects();
        bootstrap.Modal.getInstance(document.getElementById('addProjectModal')).hide();
        showToast('Success', 'Project saved successfully', 'success');
    } catch (error) {
        console.error('Error saving project:', error);
        showToast('Error', error.message || 'Failed to save project', 'error');
    }
}

async function deleteProject() {
    const projectId = document.getElementById('projectId').value;
    if (!projectId) return;

    if (confirm('Are you sure you want to delete this project? All associated tasks will also be deleted.')) {
        try {
            const response = await fetch(`/api/projects/${projectId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                loadProjects();
                loadTasks();
                bootstrap.Modal.getInstance(document.getElementById('addProjectModal')).hide();
            }
        } catch (error) {
            console.error('Error deleting project:', error);
        }
    }
}

// Backup Management Functions
let selectedBackupFile = null;

function loadBackups() {
    fetch('/api/backups')
        .then(response => response.json())
        .then(data => {
            const backupsList = document.getElementById('backups-list');
            backupsList.innerHTML = '';

            if (data.backups.length === 0) {
                backupsList.innerHTML = '<div class="list-group-item text-muted">No backups available</div>';
                return;
            }

            data.backups.forEach(backup => {
                const size = formatFileSize(backup.size);
                const backupItem = document.createElement('div');
                backupItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                backupItem.innerHTML = `
                    <div>
                        <h6 class="mb-1">${backup.filename}</h6>
                        <small class="text-muted">Created: ${backup.timestamp}</small>
                        <small class="text-muted ms-2">Size: ${size}</small>
                    </div>
                    <button class="btn btn-outline-primary btn-sm" onclick="showRestoreBackupModal('${backup.filename}', '${backup.timestamp}')">
                        <i class="fas fa-undo"></i> Restore
                    </button>
                `;
                backupsList.appendChild(backupItem);
            });
        })
        .catch(error => {
            console.error('Error loading backups:', error);
            showToast('Error', 'Failed to load backups', 'error');
        });
}

function createBackup() {
    fetch('/api/backups', {
        method: 'POST'
    })
        .then(response => response.json())
        .then(data => {
            showToast('Success', 'Backup created successfully', 'success');
            loadBackups();
        })
        .catch(error => {
            console.error('Error creating backup:', error);
            showToast('Error', 'Failed to create backup', 'error');
        });
}

function showRestoreBackupModal(filename, timestamp) {
    selectedBackupFile = filename;
    const details = document.getElementById('restore-backup-details');
    details.textContent = `Backup from: ${timestamp}`;
    const modal = new bootstrap.Modal(document.getElementById('restoreBackupModal'));
    modal.show();
}

function confirmRestoreBackup() {
    if (!selectedBackupFile) return;

    fetch(`/api/backups/restore/${selectedBackupFile}`, {
        method: 'POST'
    })
        .then(response => response.json())
        .then(data => {
            showToast('Success', 'Database restored successfully', 'success');
            // Reload all data
            loadProjects();
            loadTasks();
            calendar.refetchEvents();
            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('restoreBackupModal'));
            modal.hide();
        })
        .catch(error => {
            console.error('Error restoring backup:', error);
            showToast('Error', 'Failed to restore backup', 'error');
        });
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// AI Functions
async function getAIAnalysis() {
    try {
        // Show loading state
        const aiSuggestions = document.getElementById('ai-suggestions');
        const aiContent = document.getElementById('ai-content');
        aiSuggestions.style.display = 'block';
        aiContent.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div><div class="mt-2">Analyzing tasks and generating suggestions...</div></div>';

        // Get task dependencies analysis
        const analysisResponse = await fetch('/api/tasks/analyze');
        const analysisData = await analysisResponse.json();
        
        // Display the suggestions
        aiContent.innerHTML = `
            <div>
                <h6 class="mb-3">🔄 Task Dependencies Analysis</h6>
                <pre class="border rounded p-3 bg-light" style="font-size: 0.8rem; white-space: pre-wrap;">${analysisData.analysis}</pre>
            </div>
            <div class="mt-4">
                <p class="text-muted">
                    <i class="fas fa-info-circle"></i> 
                    Click the calendar icon on any task to get AI scheduling suggestions for that specific task.
                </p>
            </div>
        `;
    } catch (error) {
        console.error('Error getting AI analysis:', error);
        aiContent.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i> 
                Error analyzing tasks. Please try again.
            </div>
        `;
    }
}

// Loading state management
let loadingToast = null;

function showLoadingToast(message) {
    hideLoadingToast(); // Clear any existing toast
    loadingToast = showToast('Loading', message, 'info', false);
}

function hideLoadingToast() {
    if (loadingToast) {
        loadingToast.hide();
        loadingToast = null;
    }
}

async function generateStatusReport() {
    let loadingToast = null;
    try {
        loadingToast = showToast('Loading', 'Generating status report...', 'info', false);
        console.log('Generating status report...'); // Debug log
        
        const response = await fetch('/api/status-report');
        console.log('Response received:', response.status); // Debug log
        
        if (!response.ok) {
            throw new Error(`Failed to generate status report: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Data received:', data); // Debug log
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        // Convert markdown to HTML using marked
        const reportHtml = marked.parse(data.report);
        
        // Display the report in the modal
        const reportContent = document.getElementById('statusReportContent');
        reportContent.innerHTML = reportHtml;
        
        // Show the modal
        const modal = document.getElementById('statusReportModal');
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        if (loadingToast) {
            loadingToast.hide();
        }
        showToast('Success', 'Status report generated successfully', 'success');
    } catch (error) {
        console.error('Error generating status report:', error);
        if (loadingToast) {
            loadingToast.hide();
        }
        showToast('Error', error.message || 'Failed to generate status report', 'error');
    }
}

async function copyStatusReport() {
    try {
        const reportContent = document.getElementById('statusReportContent');
        const textContent = reportContent.innerText;
        await navigator.clipboard.writeText(textContent);
        showToast('Success', 'Report copied to clipboard', 'success');
    } catch (error) {
        console.error('Error copying report:', error);
        showToast('Error', 'Failed to copy report', 'error');
    }
}

function showToast(title, message, type = 'info', autohide = true) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    const toastContainer = document.getElementById('toastContainer');
    if (toastContainer) {
        toastContainer.appendChild(toast);
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
    } else {
        console.error('Toast container not found');
    }
}

function getTaskTitle(taskId) {
    const task = tasks.find(t => t.id === parseInt(taskId, 10));
    return task ? task.title : 'Unknown Task';
}

function getTaskColor(taskId) {
    const task = tasks.find(t => t.id === parseInt(taskId, 10));
    return task && task.project_color ? task.project_color : '#6c757d';  // Default to gray if no color found
}

// Project color generation
const projectColors = {};

// Base colors with high saturation and good contrast
const baseColors = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', 
    '#FFEEAD', '#D4A5A5', '#9B59B6', '#3498DB',
    '#FF8C42', '#29C7AC', '#6C5CE7', '#A8E6CF',
    '#FDCB6E', '#FF7675', '#74B9FF', '#55EDC4',
    '#2ECC71', '#F1C40F', '#E67E22', '#E84393'
];

// Generate a random color not in use
function generateUniqueColor() {
    // First try to use one of the base colors
    const unusedBaseColors = baseColors.filter(color => 
        !Object.values(projectColors).includes(color)
    );
    
    if (unusedBaseColors.length > 0) {
        return unusedBaseColors[Math.floor(Math.random() * unusedBaseColors.length)];
    }
    
    // If all base colors are used, generate a random color
    // that's sufficiently different from existing colors
    let newColor;
    let attempts = 0;
    const maxAttempts = 50;
    
    do {
        newColor = generateRandomColor();
        attempts++;
    } while (
        (isColorTooSimilarToExisting(newColor) || isColorTooDark(newColor)) && 
        attempts < maxAttempts
    );
    
    return newColor;
}

// Generate a random hex color
function generateRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

// Convert hex to RGB
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

// Check if a color is too similar to existing colors
function isColorTooSimilarToExisting(newColor) {
    const existingColors = Object.values(projectColors);
    const newRgb = hexToRgb(newColor);
    
    return existingColors.some(existingColor => {
        const existingRgb = hexToRgb(existingColor);
        const distance = Math.sqrt(
            Math.pow(existingRgb.r - newRgb.r, 2) +
            Math.pow(existingRgb.g - newRgb.g, 2) +
            Math.pow(existingRgb.b - newRgb.b, 2)
        );
        return distance < 100; // Minimum distance threshold
    });
}

// Check if a color is too dark
function isColorTooDark(color) {
    const rgb = hexToRgb(color);
    const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    return brightness < 128;
}

function getProjectColor(projectId) {
    if (!projectColors[projectId]) {
        projectColors[projectId] = generateUniqueColor();
    }
    return projectColors[projectId];
}

// Display functions
function displayProjects(projects) {
    const projectsList = document.getElementById('projects-list');
    projectsList.innerHTML = projects.map(project => {
        const projectColor = getProjectColor(project.id);
        const isExpanded = expandedProjects.has(project.id);
        
        // Store project data as a stringified JSON, properly escaped for HTML attributes
        const projectData = JSON.stringify(project)
            .replace(/&/g, "&amp;")
            .replace(/'/g, "&#39;")
            .replace(/"/g, "&quot;");
            
        return `
            <div class="project-item" style="border-left: 4px solid ${projectColor}">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="project-header" style="cursor: pointer;" data-project='${projectData}'>
                        <h5 class="mb-0">${project.name}</h5>
                        <span class="badge bg-${getStatusColor(project.status)} ms-2">${project.status}</span>
                        <span class="badge ${getPriorityClass(project.priority)} ms-2">${project.priority_label}</span>
                    </div>
                    <button class="btn btn-link btn-sm p-0 text-dark" 
                            onclick="toggleProjectDetails(${project.id}, event)">
                        <i class="fas fa-chevron-${isExpanded ? 'up' : 'down'}"></i>
                    </button>
                </div>
                <div class="project-details ${isExpanded ? 'show' : ''}" style="display: ${isExpanded ? 'block' : 'none'}">
                    <p class="mt-2 mb-2">${project.description || 'No description'}</p>
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" 
                             style="width: ${project.progress || 0}%; background-color: ${projectColor}"
                             aria-valuenow="${project.progress || 0}" aria-valuemin="0" aria-valuemax="100">
                            ${project.progress || 0}%
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    // Add click handlers for project headers
    document.querySelectorAll('.project-header').forEach(header => {
        header.addEventListener('click', function() {
            const projectData = JSON.parse(this.dataset.project);
            showEditProjectModal(projectData);
        });
    });
}

function getStatusColor(status) {
    switch (status.toLowerCase()) {
        case 'completed':
            return 'success';
        case 'in progress':
            return 'primary';
        case 'pending':
            return 'warning';
        default:
            return 'secondary';
    }
}

function getStatusBackground(status) {
    switch (status) {
        case 'Not Started':
            return '#f8f9fa';  // Light gray
        case 'In Progress':
            return '#e8f4ff';  // Light blue
        case 'Completed':
            return '#e8f8e8';  // Light green
        default:
            return '#ffffff';  // White
    }
}

function getPriorityClass(priority) {
    return {
        1: 'bg-danger',    // High priority
        2: 'bg-warning',   // Medium priority
        3: 'bg-info'       // Low priority
    }[priority] || 'bg-secondary';
}

// Track expanded project and task states
const expandedProjects = new Set();
const expandedTasks = new Set();

function toggleProjectDetails(projectId, event) {
    event.stopPropagation();
    expandedProjects.has(projectId) 
        ? expandedProjects.delete(projectId) 
        : expandedProjects.add(projectId);
    loadProjects();
}

function toggleTaskDetails(taskId, event) {
    event.stopPropagation();
    expandedTasks.has(taskId) 
        ? expandedTasks.delete(taskId) 
        : expandedTasks.add(taskId);
    loadTasks();
}

function showEditProjectModal(project) {
    console.log('Opening edit project modal for:', project);
    
    // Set modal title
    document.getElementById('projectModalTitle').textContent = 'Edit Project';
    
    // Fill in project details
    document.getElementById('projectId').value = project.id;
    document.getElementById('projectName').value = project.name;
    document.getElementById('projectDescription').value = project.description || '';
    document.getElementById('projectStatus').value = project.status;
    document.getElementById('projectPriority').value = project.priority;
    
    // Show delete button for existing projects
    const deleteBtn = document.getElementById('deleteProjectBtn');
    if (deleteBtn) {
        deleteBtn.style.display = 'block';
    }
    
    // Show the modal
    console.log('Getting modal element...');
    const modalElement = document.getElementById('addProjectModal');
    console.log('Modal element:', modalElement);
    
    try {
        const modal = new bootstrap.Modal(modalElement);
        console.log('Created modal instance:', modal);
        modal.show();
    } catch (error) {
        console.error('Error showing modal:', error);
    }
}

function showToast(type, message) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    const toastContainer = document.getElementById('toastContainer');
    if (toastContainer) {
        toastContainer.appendChild(toast);
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
    } else {
        console.error('Toast container not found');
    }
}
